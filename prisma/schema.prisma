

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

  model User {
  id           String @id @default(cuid()) @map("_id") @db.String
  email        String
  username     String?
  clients      Client[]
  currentFiles CurrentFile []
  createdAt    DateTime @default(now())
}

model Client {
  id           String @id @default(cuid()) @map("_id") @db.String
  name         String
  category     ClientCategory 
  status       ClientStatus
  workSuspended      Boolean       @default(false)
  User         User?   @relation(fields: [userId], references: [id])
  userId       String? @db.String
  createdAt    DateTime @default(now())
  currentFiles      CurrentFile[]
  tasks         Task[]
}

model CurrentFile {
  id                 String @id @default(cuid()) @map("_id") @db.String
  period             String 
  slug               String @unique
  shortDate          Float  
  periodStart        String
  periodEnd          String
  // periodStart        DateTime
  // periodEnd          DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
  clientId           String           @db.String
  Client             Client           @relation(fields: [clientId], references: [id])
  User         User?   @relation(fields: [userId], references: [id])
  userId       String? @db.String


}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String   
  userId      String   
  done        Boolean @default(false)       
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  updatedAt   DateTime @updatedAt
  clientId  String @db.String
  client    Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
}



enum ClientCategory {
  limited_company
  partnership
  sole_trader
  charity
  other
}

enum ClientStatus {
  awaiting_ml_checks
  active
  archived
}